---
description: Page layout standards using PageContainer component for consistent spacing and responsive design
globs: src/components/**/*.tsx, src/pages/**/*.tsx
alwaysApply: true
---

# Page Layout Standards

> **Architecture Overview**: For understanding layout system architecture, state flow, and design patterns, see [docs/patterns/layout-system.md](mdc:docs/patterns/layout-system.md).

## Core Component: PageContainer

**ALWAYS use PageContainer from `@/components/layout/PageContainer` for page layouts**

### ⚠️ Critical Mobile Layout Requirements

**Every page with mobile bottom navigation MUST use this container structure:**

```tsx
import PageContainer from '@/components/layout/PageContainer';

export function MyPage() {
  return (
    <div className="flex flex-col h-screen md:h-full">
      <Navbar />
      
      {/* CRITICAL: Mobile constraints to prevent navbar/bottom nav overlap */}
      <div className="flex-1 overflow-hidden w-full pt-16 md:pt-0">
        <div className="h-full overflow-auto pb-16 md:pb-0">
          <PageContainer 
            disablePadding={false} 
            className="pt-6 pb-6 md:pb-12 mx-auto px-4" 
            maxWidth="6xl"
          >
            {children}
          </PageContainer>
        </div>
      </div>
    </div>
  );
}
```

**Why This Structure is Critical:**
- `pt-16 md:pt-0`: Prevents content from hiding behind fixed mobile navbar (h-16)
- `pb-16 md:pb-0`: Prevents content from hiding behind mobile bottom navigation
- `overflow-hidden` → `overflow-auto`: Ensures proper scroll behavior on mobile
- `h-screen md:h-full`: Correct height management across breakpoints

### Standard Implementation Pattern (Content Pages Only)

For pages WITHOUT mobile bottom navigation:

```tsx
import PageContainer from '@/components/layout/PageContainer';

export function MyPage() {
  return (
    <PageContainer 
      disablePadding={false} 
      className="pt-6 pb-6 md:pb-12 mx-auto px-4" 
      maxWidth="6xl"
    >
      {children}
    </PageContainer>
  );
}
```

## Navbar Height Requirements

### Universal Navbar Standards
- **All navbars MUST use `h-16`** (64px height)
- **All navbar shadows MUST use `shadow-sm`** for consistent visual height
- **Sidebar logo sections MUST use `py-3` with `h-10` logos**
- **Mobile hamburger buttons MUST be styled consistently**:
  ```tsx
  <button
    className="bg-[#F37022] text-white flex items-center justify-center p-2 rounded-md hover:bg-[#E36012]"
    aria-label="Open sidebar"
  >
    <Menu className="h-5 w-5" />
  </button>
  ```

### Navbar Implementation Examples

**Feature Navbar Pattern**:
```tsx
<nav className={cn(
  "bg-white dark:bg-gray-800 shadow-sm fixed md:sticky top-0 z-30 w-full transition-all duration-300 ease-in-out",
  isDesktop && isPinned && !isExpanded && contentMargin
)}>
  <div className="max-w-6xl mx-auto px-4">
    <div className="flex items-center justify-between h-16">
      {/* Mobile header */}
      <div className="md:hidden flex items-center justify-between w-full">
        <button
          onClick={() => setIsExpanded(true)}
          className="bg-[#F37022] text-white flex items-center justify-center p-2 rounded-md hover:bg-[#E36012]"
          aria-label="Open sidebar"
        >
          <Menu className="h-5 w-5" />
        </button>
        
        <div className="flex flex-col flex-grow">
          <h1 className="text-lg font-semibold text-center dark:text-white">
            Page Title
          </h1>
        </div>
      </div>

      {/* Desktop layout */}
      <div className="hidden md:flex md:items-center md:w-full">
        {/* Desktop navigation content */}
      </div>
    </div>
  </div>
</nav>
```

## PageContainer Props & Usage

### Essential Props

#### `disablePadding: boolean`
- **Default**: `false`
- **Use**: Set to `true` when you need manual padding control
- **Standard**: Always use `false` with `className="mx-auto px-4"`

#### `maxWidth: string`
- **Standard**: `"6xl"` for content pages (1152px)
- **Options**: `"narrow"` (960px), `"default"` (1280px), `"wide"` (1440px), or custom value
- **Never use**: `"full"` unless absolutely necessary

#### `className: string`
- **Standard Pattern**: `"pt-6 pb-6 md:pb-12 mx-auto px-4"`
- **Required**: Always include `mx-auto px-4`
- **Vertical Padding**: Use `pt-6 pb-6 md:pb-12` for consistency

### Special Use Cases

#### Chat/Messaging Interfaces
```tsx
<PageContainer bare>
  {/* Complete layout control for chat */}
</PageContainer>
```

#### Custom Overflow Control
```tsx
<PageContainer noOverflow>
  {/* Manual overflow management */}
</PageContainer>
```

#### Full Height Layouts
```tsx
<PageContainer fullHeight flexColumn>
  {/* Full height with flex column */}
</PageContainer>
```

## Page Layout Templates

### Standard Content Page
```tsx
export function StandardPage() {
  return (
    <div className="flex flex-col h-screen md:h-full">
      <FeatureNavbar />
      
      {/* Main content with proper mobile constraints */}
      <div className="flex-1 overflow-hidden w-full pt-16 md:pt-0">
        <div className="h-full overflow-auto pb-16 md:pb-0">
          <PageContainer 
            disablePadding={false} 
            className="pt-6 pb-6 md:pb-12 mx-auto px-4" 
            maxWidth="6xl"
          >
            <h1>Page Title</h1>
            {/* Content */}
          </PageContainer>
        </div>
      </div>
    </div>
  );
}
```

### Mobile-First Page with Bottom Navigation
```tsx
export function MobilePage() {
  return (
    <div className="flex flex-col h-screen md:h-full">
      <FeatureNavbar />
      
      {/* Account for fixed navbar on mobile */}
      <div className="flex-1 overflow-hidden w-full pt-16 md:pt-0">
        <div className="h-full overflow-auto pb-16 md:pb-0">
          <PageContainer 
            disablePadding={false} 
            className="pt-6 pb-6 md:pb-12 mx-auto px-4" 
            maxWidth="6xl"
          >
            {/* Content */}
          </PageContainer>
        </div>
      </div>
      
      {/* Mobile bottom navigation */}
      <div className="md:hidden fixed bottom-0 left-0 right-0 bg-white border-t z-50">
        {/* Bottom nav content */}
      </div>
    </div>
  );
}
```

### Settings/Configuration Page
```tsx
export function SettingsPage() {
  return (
    <div className="flex flex-col h-screen md:h-full">
      <SettingsNavbar />
      
      {/* Main content with proper mobile constraints */}
      <div className="flex-1 overflow-hidden w-full pt-16 md:pt-0">
        <div className="h-full overflow-auto pb-16 md:pb-0">
          <PageContainer 
            disablePadding={false} 
            className="pt-4 pb-6 md:pb-12 mx-auto px-4" 
            maxWidth="6xl"
          >
            {/* Settings content */}
          </PageContainer>
        </div>
      </div>
    </div>
  );
}
```

## Complex Application Interface Patterns

### Layout Decision Criteria

**Use PageContainer for:**
- Content-focused pages (blogs, documentation, forms)
- Marketing pages and landing pages
- Settings and configuration pages
- Simple dashboard pages
- Any page where content should be centered and constrained

**Use Custom Layouts for:**
- **Multi-panel interfaces** (like IDEs, note-taking apps, email clients)
- **Resizable panel layouts** with drag handles
- **Three-view mobile navigation** (sidebar → list → detail)
- **Full-viewport applications** that need custom scroll management
- **Complex state-dependent layouts** with panel show/hide logic
- Applications that behave more like desktop software than websites

### When NOT to Use PageContainer

**PageContainer is designed for content pages, not complex application interfaces.** The key indicator is whether your interface needs to:

1. **Fill the entire viewport** without centered content constraints
2. **Manage multiple content areas** simultaneously (panels, sidebars, etc.)
3. **Handle complex responsive transformations** (3-panel → 3-view mobile)
4. **Provide resizable or collapsible sections**
5. **Maintain application-like state** across navigation areas

### Multi-Panel Desktop Layout Pattern

For complex application interfaces like the notes page:

```tsx
export function NotesPage() {
  const [showTagSidebar, setShowTagSidebar] = useState(true);
  const [showNotesList, setShowNotesList] = useState(true);
  const [tagSidebarWidth, setTagSidebarWidth] = useState(256);
  const [notesListWidth, setNotesListWidth] = useState(340);
  
  const isDesktop = useMediaQuery('(min-width: 1024px)');

  return (
    <div className="flex flex-col h-full">
      <NotesNavbar />
      
      {/* Multi-panel desktop layout */}
      <div className="flex h-full w-full min-w-0 bg-gray-50 dark:bg-gray-900 relative">
        {/* Tag Sidebar with resize handle */}
        {showTagSidebar && (
          <>
            <div 
              className="bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex-shrink-0"
              style={{ width: tagSidebarWidth }}
            >
              <TagSidebar />
            </div>
            <ResizeHandle onResize={setTagSidebarWidth} />
          </>
        )}

        {/* Notes List with resize handle */}
        {showNotesList && (
          <>
            <div 
              className="bg-gray-50 dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700 flex-shrink-0"
              style={{ width: notesListWidth }}
            >
              <NotesList />
            </div>
            <ResizeHandle onResize={setNotesListWidth} />
          </>
        )}

        {/* Main content area */}
        <div className="flex-1 flex flex-col bg-white dark:bg-gray-800">
          <NoteEditor />
        </div>

        {/* Panel toggle controls */}
        {isDesktop && (
          <div className="absolute bottom-4 left-4 z-40 flex gap-2">
            <Button onClick={() => setShowTagSidebar(!showTagSidebar)}>
              Tags
            </Button>
            <Button onClick={() => setShowNotesList(!showNotesList)}>
              List
            </Button>
          </div>
        )}
      </div>
    </div>
  );
}
```

### Three-View Mobile Navigation Pattern

For complex applications on mobile, use a three-view navigation pattern:

```tsx
type MobileView = 'tags' | 'list' | 'editor';

export function NotesPage() {
  const [mobileView, setMobileView] = useState<MobileView>('list');
  const [selectedNoteId, setSelectedNoteId] = useState<string | null>(null);
  
  const isMobile = useMediaQuery('(max-width: 640px)');

  // Auto-switch to editor when note selected
  useEffect(() => {
    if (isMobile && selectedNoteId && mobileView !== 'editor') {
      setMobileView('editor');
    }
  }, [selectedNoteId, isMobile, mobileView]);

  // Reset to list when no note selected
  useEffect(() => {
    if (isMobile && !selectedNoteId && mobileView === 'editor') {
      setMobileView('list');
    }
  }, [selectedNoteId, isMobile, mobileView]);

  const renderMobileContent = () => {
    switch (mobileView) {
      case 'tags':
        return (
          <TagSidebar 
            onTagSelect={(tag) => {
              setSelectedTag(tag);
              setMobileView('list'); // Auto-switch to list
            }}
          />
        );
      case 'list':
        return (
          <NotesList 
            onNoteSelect={(noteId) => {
              setSelectedNoteId(noteId);
              setMobileView('editor'); // Auto-switch to editor
            }}
          />
        );
      case 'editor':
        return <NoteEditor />;
    }
  };

  if (isMobile) {
    return (
      <div className="flex flex-col h-screen">
        <NotesNavbar />
        <div className="flex-1 overflow-hidden pt-16">
          {renderMobileContent()}
        </div>
        <ThreeTabMobileBottomNav 
          activeView={mobileView}
          onViewChange={setMobileView}
        />
      </div>
    );
  }

  // Desktop layout...
}
```

### Resizable Panel Implementation

For resizable panels in desktop layouts:

```tsx
const handleMouseDown = useCallback((e: React.MouseEvent, panel: string) => {
  if (!isDesktop) return;
  
  e.preventDefault();
  isDragging.current = panel;
  startX.current = e.clientX;
  startWidth.current = getCurrentWidth(panel);
  
  document.addEventListener('mousemove', handleMouseMove);
  document.addEventListener('mouseup', handleMouseUp);
  document.body.style.cursor = 'col-resize';
  document.body.style.userSelect = 'none';
}, [isDesktop]);

const handleMouseMove = useCallback((e: MouseEvent) => {
  if (!isDragging.current || !isDesktop) return;
  
  const deltaX = e.clientX - startX.current;
  const newWidth = Math.max(minWidth, Math.min(maxWidth, startWidth.current + deltaX));
  
  updatePanelWidth(isDragging.current, newWidth);
}, [isDesktop]);

// Resize handle component
<div
  className="w-1 bg-gray-200 dark:bg-gray-700 hover:bg-orange-400 cursor-col-resize flex-shrink-0 relative group"
  onMouseDown={(e) => handleMouseDown(e, 'panel-name')}
>
  <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
    <GripVertical className="h-4 w-4 rotate-90" />
  </div>
</div>
```

### Dynamic Content Filtering Patterns

For navigation components with dynamic counts based on search/filters:

```tsx
// Calculate counts from filtered content
const notesForTagCounts = notes.filter(note => {
  const matchesSearch = !searchQuery || 
    note.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    note.content.toLowerCase().includes(searchQuery.toLowerCase()) ||
    note.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
  
  return matchesSearch; // Exclude tag filtering to show search impact
});

const tagCounts = notesForTagCounts.reduce((acc, note) => {
  note.tags.forEach(tag => {
    acc[tag] = (acc[tag] || 0) + 1;
  });
  return acc;
}, {} as Record<string, number>);

// Pass dynamic counts to navigation
<TagSidebar
  tags={tagData}
  totalCount={notesForTagCounts.length} // Updates with search
  selectedTag={selectedTag}
  onTagSelect={setSelectedTag}
/>
```

## Responsive Design Requirements

### Breakpoints (from `@/constants/layout`)
- **Mobile**: `max-width: 640px`
- **Tablet**: `640px - 1024px`  
- **Desktop**: `min-width: 1024px` (standard) / `min-width: 1280px` (layout system integration)

**Note**: Complex applications may use `1024px` for desktop detection while the main layout system uses `1280px` for sidebar integration. Choose the appropriate breakpoint based on your specific layout needs.

### Mobile-Specific Requirements
- **Fixed navbar**: Use `fixed md:sticky` positioning
- **Mobile padding**: Account for fixed elements with `pt-16 md:pt-0`
- **Bottom navigation**: Add `pb-16 md:pb-0` for bottom nav space
- **Safe areas**: Use `env(safe-area-inset-bottom)` for iOS devices
- **Touch scrolling**: Include `-webkit-overflow-scrolling: touch`

### Mobile Bottom Navigation Standards

#### Standard Four-Tab Navigation
```tsx
{/* Standard mobile bottom navigation pattern */}
<div className="md:hidden fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 z-50">
  <div className="grid grid-cols-4 gap-1 px-2 py-2"> {/* Adjust grid-cols based on nav items */}
    <MobileNavLink 
      to="/path" 
      icon={<Icon className="h-5 w-5" />} 
      text="Label" 
    />
  </div>
</div>
```

#### Three-Tab Application Navigation
For complex applications with multi-view navigation:

```tsx
interface ThreeTabMobileBottomNavProps {
  activeView: 'tags' | 'list' | 'editor';
  onViewChange: (view: 'tags' | 'list' | 'editor') => void;
  hasSelectedNote?: boolean;
}

export function ThreeTabMobileBottomNav({ activeView, onViewChange, hasSelectedNote }: ThreeTabMobileBottomNavProps) {
  return (
    <div className="md:hidden fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 z-50"
         style={{ paddingBottom: 'env(safe-area-inset-bottom, 0px)' }}>
      <div className="grid grid-cols-3 gap-1 px-2 py-2">
        <MobileNavButton
          isActive={activeView === 'tags'}
          onClick={() => onViewChange('tags')}
          icon={<Hash className="h-5 w-5" />}
          text="Tags"
        />
        
        <MobileNavButton
          isActive={activeView === 'list'}
          onClick={() => onViewChange('list')}
          icon={<FileText className="h-5 w-5" />}
          text="Notes"
        />
        
        <MobileNavButton
          isActive={activeView === 'editor'}
          onClick={() => onViewChange('editor')}
          icon={<Edit className="h-5 w-5" />}
          text="Editor"
          disabled={!hasSelectedNote}
        />
      </div>
    </div>
  );
}
```

**Mobile Bottom Nav Requirements**:
- **Fixed Positioning**: Always use `fixed bottom-0 left-0 right-0`
- **Z-Index**: Use `z-50` for proper layering above content
- **Safe Area**: Include `padding-bottom: env(safe-area-inset-bottom, 0)` for iOS devices
- **Grid Layout**: Use `grid grid-cols-X` where X matches number of nav items (3 or 4)
- **Icon Size**: Standard `h-5 w-5` for all icons
- **Text Size**: Use `text-xs` for labels
- **State Management**: Include active/disabled states for application navigation

#### Mobile Navigation Consistency Standards

**Use MobileNavLink for navigation between pages:**
```tsx
import { MobileNavLink } from '@/components/common/MobileNavLink';

<MobileNavLink 
  to="/flashcards/study" 
  icon={<Brain className="h-5 w-5" />} 
  text="Study" 
/>
```

**Use MobileNavButton for view switching within a page:**
```tsx
import { MobileNavButton } from '@/components/common/MobileNavButton';

<MobileNavButton
  onClick={() => onViewChange('tags')}
  icon={<Hash className="h-5 w-5" />}
  text="Tags"
  isActive={activeView === 'tags'}
  disabled={false}
/>
```

**Consistent Styling Pattern:**
- Layout: `flex flex-col items-center justify-center space-y-1 py-1`
- Active color: `text-[#F37022]` (brand orange)
- Inactive color: `text-gray-600 dark:text-gray-300`
- Disabled color: `text-gray-400 dark:text-gray-600 opacity-50`
- No background colors or rounded corners
- Simple, clean design matching system UI patterns

### iOS Safe Area Support
```css
/* CSS Variables for safe area */
:root {
  --chat-safe-area-bottom: env(safe-area-inset-bottom, 0px);
  --chat-input-offset: calc(56px + 8px + env(safe-area-inset-bottom, 0px));
}

/* Mobile bottom navigation safe area */
.md\:hidden.fixed.bottom-0.left-0.right-0 {
  padding-bottom: env(safe-area-inset-bottom, 0);
}
```

**Safe Area Usage in Components**:
```tsx
// Mobile input areas
<div 
  className="fixed bottom-0 left-0 right-0"
  style={{
    paddingBottom: 'env(safe-area-inset-bottom, 0px)'
  }}
>
```

### Z-Index Layering Standards

**Z-Index Hierarchy (Lowest to Highest)**:
- **Content**: `z-0` to `z-10` - Regular page content
- **Fixed Navbars**: `z-30` - Top navigation bars
- **Mobile Bottom Nav**: `z-50` - Bottom navigation on mobile
- **Overlays/Modals**: `z-50` - Dialog overlays, sheet overlays
- **Tooltips**: `z-[99999]` - Highest priority UI elements

**Critical Z-Index Values**:
```tsx
// Navbar (top)
<nav className="z-30">

// Mobile bottom navigation  
<div className="z-50">

// Modal/Dialog overlays
<div className="z-50">

// Tooltips (highest priority)
<div className="z-[99999]">
```

### Layout State Integration
```tsx
import { useLayoutState } from '@/hooks/useLayoutState';

export function ResponsiveComponent() {
  const { isDesktop, isPinned, isExpanded, contentMargin } = useLayoutState();
  
  return (
    <nav className={cn(
      "navbar-base-classes",
      isDesktop && isPinned && !isExpanded && contentMargin
    )}>
      {/* Navbar content */}
    </nav>
  );
}
```

## Common Anti-Patterns to Avoid

### ❌ Missing Mobile Layout Container Structure
```tsx
// DON'T: Direct PageContainer usage without mobile constraints
<div className="flex flex-col h-screen">
  <Navbar />
  <PageContainer className="pt-6 pb-6 md:pb-12 mx-auto px-4" maxWidth="6xl">
    {content}
  </PageContainer>
</div>

// DO: Proper mobile-first container structure  
<div className="flex flex-col h-screen md:h-full">
  <Navbar />
  {/* Critical mobile constraints */}
  <div className="flex-1 overflow-hidden w-full pt-16 md:pt-0">
    <div className="h-full overflow-auto pb-16 md:pb-0">
      <PageContainer className="pt-6 pb-6 md:pb-12 mx-auto px-4" maxWidth="6xl">
        {content}
      </PageContainer>
    </div>
  </div>
</div>
```

**Critical Mobile Layout Requirements:**
- **Container Height**: Use `h-screen md:h-full` on root container
- **Top Spacing**: Add `pt-16 md:pt-0` to account for fixed mobile navbar
- **Bottom Spacing**: Add `pb-16 md:pb-0` to account for mobile bottom navigation  
- **Overflow Management**: Use `overflow-hidden` on outer container, `overflow-auto` on inner scrollable area
- **Z-Index Consistency**: Mobile bottom navigation must use `z-50`, not `z-20`

### ❌ Early Returns That Bypass UI Controls
```tsx
// DON'T: Return early and bypass header controls
export function MyComponent() {
  if (items.length === 0) {
    return <EmptyState title="No items" />;
  }
  
  return (
    <div>
      <header>
        <h1>Items</h1>
        <button>New Item</button>
        <DropdownMenu>Templates</DropdownMenu>
      </header>
      <main>
        <ItemsList items={items} />
      </main>
    </div>
  );
}
```

### ✅ Proper Empty State Structure
```tsx
// DO: Keep header controls visible, handle empty state in content area
export function MyComponent() {
  return (
    <div>
      <header>
        <h1>Items</h1>
        <button>New Item</button>
        <DropdownMenu>Templates</DropdownMenu>
      </header>
      <main>
        {items.length === 0 ? (
          <EmptyState 
            title="No items yet" 
            description="Create your first item using the New Item button above."
          />
        ) : (
          <ItemsList items={items} />
        )}
      </main>
    </div>
  );
}
```

### ❌ Component Structure That Hides Controls
```tsx
// DON'T: Conditional rendering that bypasses essential UI
export function ListPage() {
  const [items, setItems] = useState([]);
  
  // This hides the "Create" button when list is empty
  if (items.length === 0) {
    return <EmptyState title="No items" />;
  }
  
  return (
    <div>
      <div className="header">
        <h1>Items</h1>
        <button onClick={handleCreate}>Create New</button>
      </div>
      <ItemsList items={items} />
    </div>
  );
}
```

### ✅ Component Structure That Preserves Controls
```tsx
// DO: Always render essential UI elements
export function ListPage() {
  const [items, setItems] = useState([]);
  
  return (
    <div>
      <div className="header">
        <h1>Items</h1>
        <button onClick={handleCreate}>Create New</button>
      </div>
      <div className="content">
        {items.length === 0 ? (
          <EmptyState 
            title="No items yet" 
            description="Use the Create New button above to add your first item."
          />
        ) : (
          <ItemsList items={items} />
        )}
      </div>
    </div>
  );
}
```

### ❌ Manual Layout Containers
```tsx
// DON'T: Manual max-width and centering
<div className="max-w-6xl mx-auto px-4">
  <div className="container mx-auto">
    {content}
  </div>
</div>
```

### ❌ Inconsistent Navbar Heights
```tsx
// DON'T: Different navbar heights
<nav className="h-14">  // Wrong height
<nav className="h-20">  // Wrong height
<nav className="py-4">  // Wrong approach
```

### ❌ Missing Centering Classes
```tsx
// DON'T: Forget mx-auto px-4
<PageContainer className="pt-6 pb-6">  // Content sticks to sidebar
```

### ❌ Wrong Height Properties
```tsx
// DON'T: Use h-screen with navbars
<div className="h-screen">  // Causes sidebar scrolling issues

// DO: Use h-full instead
<div className="h-full">
```

### ❌ Inconsistent Padding Patterns
```tsx
// DON'T: Custom padding patterns
<PageContainer className="pt-8 pb-4">     // Inconsistent
<PageContainer className="py-12">         // Inconsistent

// DO: Use standard pattern
<PageContainer className="pt-6 pb-6 md:pb-12 mx-auto px-4">
```

### ❌ Creating Custom Layout Wrappers (For Content Pages)
```tsx
// DON'T: Custom layout components for standard content
export function MyCustomLayout({ children }) {
  return (
    <div className="max-w-6xl mx-auto px-4 py-6">
      {children}
    </div>
  );
}

// DO: Use PageContainer directly for content pages
<PageContainer className="pt-6 pb-6 md:pb-12 mx-auto px-4" maxWidth="6xl">
  {children}
</PageContainer>

// ✅ EXCEPTION: Custom layouts ARE appropriate for complex applications
export function NotesPage() {
  return (
    <div className="flex flex-col h-full">
      <NotesNavbar />
      <div className="flex h-full">
        <TagSidebar />
        <NotesList />
        <NoteEditor />
      </div>
    </div>
  );
}
```

### ❌ Ignoring Sidebar State
```tsx
// DON'T: Static positioning without sidebar awareness
<nav className="fixed top-0 left-0 w-full">

// DO: Use layout state for proper positioning
<nav className={cn(
  "fixed md:sticky top-0 z-30 w-full",
  isDesktop && isPinned && !isExpanded && contentMargin
)}>
```

### ❌ Incorrect Z-Index Usage
```tsx
// DON'T: Use arbitrary z-index values
<div className="z-999">     // Use standard hierarchy
<div className="z-[9999]">  // Reserved for tooltips only

// DO: Use standard z-index values
<nav className="z-30">      // For navbars
<div className="z-50">      // For modals/bottom nav
<div className="z-[99999]"> // For tooltips only
```

### ❌ Missing Safe Area Support
```tsx
// DON'T: Forget safe area for mobile bottom elements
<div className="fixed bottom-0 pb-4"> // Missing safe area padding

// DO: Include safe area support
<div 
  className="fixed bottom-0"
  style={{ paddingBottom: 'env(safe-area-inset-bottom, 0px)' }}
>
```

### ❌ Inconsistent Mobile Bottom Nav
```tsx
// DON'T: Custom mobile bottom navigation patterns
<div className="fixed bottom-0 h-20 bg-white"> // Wrong height
<div className="absolute bottom-0 z-40">       // Wrong positioning/z-index

// DO: Use standard mobile bottom nav pattern
<div className="md:hidden fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 z-50">
```

## Layout Debugging

### Built-in Debug Tool
Press `Alt+D` to toggle the Layout Debugger that shows:
- Desktop/mobile state
- Sidebar pinned/expanded state  
- Current padding/margin values
- Viewport dimensions

### Manual Layout State Access
```tsx
import { useLayoutState } from '@/hooks/useLayoutState';

const { isDesktop, isPinned, isExpanded, contentPadding, contentMargin } = useLayoutState();
```

## Integration with Existing Components

### With Feature Navbars
All feature navbars ([FlashcardsNavbar](mdc:src/components/flashcards/Navbar.tsx), [SettingsNavbar](mdc:src/components/settings/SettingsNavbar.tsx), etc.) follow the h-16 standard and integrate with the layout system.

### With Sidebar System
The layout system automatically adjusts padding based on sidebar state from [SidebarContext](mdc:src/App.tsx) and [useLayoutState](mdc:src/hooks/useLayoutState.ts).

### With Mobile Navigation
Mobile bottom navigation components ([MobileBottomNav](mdc:src/components/settings/MobileBottomNav.tsx), [MobileNavLink](mdc:src/components/common/MobileNavLink.tsx)) account for the layout system's spacing requirements and safe area insets.

### Related Documentation & Files

#### Architecture & Patterns
- [docs/patterns/layout-system.md](mdc:docs/patterns/layout-system.md) - Layout system architecture and design patterns
- [docs/README.md](mdc:docs/README.md) - Complete documentation navigation

#### Implementation Files  
- [PageContainer.tsx](mdc:src/components/layout/PageContainer.tsx) - Main layout component
- [layout.ts](mdc:src/constants/layout.ts) - Layout constants and breakpoints  
- [useLayoutState.ts](mdc:src/hooks/useLayoutState.ts) - Layout state management hook
- [ChatLayoutContainer.tsx](mdc:src/components/layout/ChatLayoutContainer.tsx) - Specialized chat layout
- [index.css](mdc:src/index.css) - Global CSS variables and safe area styles
- [MobileBottomNav.tsx](mdc:src/components/settings/MobileBottomNav.tsx) - Mobile bottom navigation component
- [MobileNavLink.tsx](mdc:src/components/common/MobileNavLink.tsx) - Reusable mobile nav link component
- [layout-utils.ts](mdc:src/lib/layout-utils.ts) - Layout utility functions

#### Complex Application Pattern Files
- [NotesPage.tsx](mdc:src/pages/NotesPage.tsx) - Multi-panel desktop layout with three-view mobile navigation
- [NotesNavbar.tsx](mdc:src/components/notes/NotesNavbar.tsx) - Feature navbar with mobile hamburger pattern
- [MobileBottomNav.tsx](mdc:src/components/notes/MobileBottomNav.tsx) - Three-tab mobile navigation implementation
- [TagSidebar.tsx](mdc:src/components/notes/TagSidebar.tsx) - Resizable sidebar with dynamic counts
- [NotesList.tsx](mdc:src/components/notes/NotesList.tsx) - List panel with responsive breakpoints
- [NoteEditor.tsx](mdc:src/components/notes/NoteEditor.tsx) - Editor panel with full-height layout

## Performance Considerations

- **Layout state** is cached and optimized to prevent unnecessary re-renders
- **Responsive hooks** use efficient media query listeners
- **Transition classes** are applied conditionally to avoid performance impact
- **Layout calculations** are memoized in the useLayoutState hook

## Migration from Legacy Patterns

When updating existing components:

1. **Replace custom containers** with PageContainer
2. **Standardize navbar heights** to h-16
3. **Add proper centering classes** (mx-auto px-4)
4. **Use layout state hooks** instead of manual responsive logic
5. **Apply consistent padding patterns** (pt-6 pb-6 md:pb-12)

## Layout Constants

All layout values are centralized in [layout.ts](mdc:src/constants/layout.ts):

```typescript
export const LAYOUT_CONSTANTS = {
  NAVBAR_HEIGHT: 64, // h-16
  SIDEBAR: {
    EXPANDED_WIDTH: 256, // w-64
    COLLAPSED_WIDTH: 64, // w-16
    LOGO_HEIGHT: 40, // h-10
  },
  Z_INDEX: {
    DROPDOWN: 30,
    MODAL: 50,
    DEBUG: 99999,
  }
} as const;
```

**✅ DO**: Reference these constants instead of hardcoding values
**❌ DON'T**: Use magic numbers for layout dimensions

## Layout Debugging Tools

### LayoutDebugger Component
The [LayoutDebugger](mdc:src/components/LayoutDebugger.tsx) provides real-time layout state inspection:

```tsx
// Automatically available in development builds
// Trigger with Alt+D keyboard shortcut
import { LayoutDebugger } from '@/components/LayoutDebugger';

// Shows:
// - Current breakpoint (mobile/desktop)  
// - Sidebar state (expanded/collapsed/pinned)
// - Content margins and padding
// - Z-index hierarchy
```

**Debug Properties Displayed**:
- `isDesktop`: Current breakpoint
- `isExpanded`: Sidebar expansion state
- `isPinned`: Sidebar pin state  
- `contentMargin`: Applied content offset
- Current route and layout component

## Enhanced Mobile Safe Areas

### Advanced Mobile Layout Patterns
```tsx
// Mobile-specific safe area handling
<div className={cn(
  "fixed inset-0", 
  "safe-area-inset-top safe-area-inset-bottom", // iOS safe areas
  "pb-[env(safe-area-inset-bottom)]", // Dynamic bottom safe area
  "pt-[env(safe-area-inset-top)]" // Dynamic top safe area
)}>

// Mobile navbar with proper safe areas
<nav className={cn(
  "fixed top-0 left-0 right-0 z-30",
  "bg-white/80 backdrop-blur-md",
  "border-b shadow-sm",
  "h-16", // Standard navbar height
  "pt-[env(safe-area-inset-top)]", // iOS notch handling
  "supports-[backdrop-filter]:bg-white/60" // Progressive enhancement
)}>

// Mobile bottom navigation with safe area
<div className={cn(
  "fixed bottom-0 left-0 right-0 z-30",
  "bg-white dark:bg-gray-800",
  "border-t border-gray-200 dark:border-gray-700",
  "pb-[env(safe-area-inset-bottom)]", // iOS home indicator
  "px-4 pt-2"
)}>
```

**Mobile Viewport Configuration** (in HTML head):
```html
<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
```

## Comprehensive Sidebar Styling

### Sidebar Component Integration
```tsx
// Complete sidebar layout integration
import { SidebarContext } from '@/App';
import { useLayoutState } from '@/hooks/useLayoutState';

export function ComponentWithSidebar() {
  const { isExpanded } = useContext(SidebarContext);
  const { isDesktop, isPinned, contentMargin } = useLayoutState();
  
  return (
    <div className={cn(
      "min-h-screen transition-all duration-300",
      // Apply content margin when sidebar affects layout
      isDesktop && isPinned && !isExpanded && contentMargin
    )}>
      {/* Component content */}
    </div>
  );
}
```

### Sidebar State Combinations
```typescript
// All possible sidebar states and their CSS effects:

// Desktop Expanded + Pinned: contentMargin = "ml-64"
// Desktop Collapsed + Pinned: contentMargin = "ml-16" 
// Desktop Expanded + Unpinned: contentMargin = ""
// Desktop Collapsed + Unpinned: contentMargin = ""
// Mobile Any State: contentMargin = "" (overlay mode)
```

### Sidebar Logo Specifications
```tsx
// Logo section styling (matches implementation)
<div className={cn(
  "flex items-center justify-center py-3", // ✅ Correct: py-3
  isDesktopExpanded ? "px-4" : "px-2"
)}>
  {/* Logo images with h-10 height */}
</div>
```

## Advanced Troubleshooting

### Layout Debugging Checklist
1. **Check Alt+D Debug Panel**: Verify layout state values
2. **Inspect useLayoutState**: Ensure hook returns expected values
3. **Validate PageContainer Props**: Confirm all required props are passed
4. **Test Mobile Breakpoints**: Use browser dev tools to test responsive behavior
5. **Check Z-Index Conflicts**: Use browser inspector to identify overlapping elements

### Common Layout Anti-Patterns
```tsx
// ❌ DON'T: Manual layout calculations  
<div style={{ marginLeft: isSidebarOpen ? '256px' : '64px' }}>

// ✅ DO: Use layout state hook
const { contentMargin } = useLayoutState();
<div className={contentMargin}>

// ❌ DON'T: Hardcoded responsive classes
<div className="ml-64 md:ml-16 lg:ml-64">

// ✅ DO: Dynamic classes based on state
<div className={cn(
  "transition-all duration-300",
  isDesktop && isPinned && !isExpanded && "ml-16",
  isDesktop && isPinned && isExpanded && "ml-64"
)}>
```

### Mobile Layout Issues
```tsx
// ❌ DON'T: Ignore mobile hamburger button
<nav className="hidden md:block"> {/* Breaks mobile navigation */}

// ✅ DO: Include mobile nav patterns
<nav className="block">
  <div className="md:hidden"> {/* Mobile hamburger */}
    <button onClick={() => setIsExpanded(true)}>
      <Menu className="h-5 w-5" />
    </button>
  </div>
  <div className="hidden md:block"> {/* Desktop nav */}
    {/* Desktop navigation items */}
  </div>
</nav>
```

### Scrolling and Overflow Issues
```tsx
// Common scroll container patterns
<div className={cn(
  "h-screen overflow-hidden", // Prevent body scroll
  "flex flex-col" // Enable internal scroll areas
)}>
  <nav className="flex-none h-16"> {/* Fixed header */}
  <main className="flex-1 overflow-auto"> {/* Scrollable content */}
    <PageContainer>{/* Your content */}</PageContainer>
  </main>
</div>
```

</div>
```
