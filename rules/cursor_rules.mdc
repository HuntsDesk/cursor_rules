---
description: 
globs: 
alwaysApply: true
---
---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 

- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding to [prisma.mdc](mdc:.cursor/rules/prisma.mdc):
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes

## AI Development Ecosystem Integration

**Cross-References to Enhanced Development Infrastructure:**

- **[riper.mdc](mdc:.cursor/rules/riper.mdc)** - Core operational protocol with 8 development modes and specialized rules integration
- **[rules-index.mdc](mdc:.cursor/rules/rules-index.mdc)** - Master index for AI agent rule consumption and relationship mapping
- **[mcp-supabase-integration.mdc](mdc:.cursor/rules/mcp-supabase-integration.mdc)** - Model Context Protocol tools for direct Supabase operations
- **[page-layout-standards.mdc](mdc:.cursor/rules/page-layout-standards.mdc)** - Comprehensive frontend development consistency standards

**Enterprise-Grade Rule Management:**

- **Parallel Processing**: AI agents should reference multiple related rules simultaneously for comprehensive guidance
- **Context-Aware Application**: Rules are automatically applied based on file patterns and development scenarios
- **Performance Optimization**: Rule selection optimized for maximum development velocity and code quality
- **Emergency Overrides**: Critical situation procedures documented for production issues

**Quality Assurance Integration:**

- All new rules must follow patterns established in this ecosystem
- Rules must include cross-references to related standards and operational protocols  
- Examples should reference actual codebase implementations
- Validation checklists should align with RIPER CAT operational modes

**Documentation Synchronization:**

- Rule changes should update the [README.md](mdc:README.md) AI Development Tools section when applicable
- Cross-references must be maintained across all rule files
- [rules-index.mdc](mdc:.cursor/rules/rules-index.mdc) should be updated when new relationships are discovered

Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for proper rule formatting and structure. 